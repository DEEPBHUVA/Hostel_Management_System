@using Hostel_Management_System.BAL
@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_StaffLayout.cshtml";
}

@using System.Data
@model DataTable

<style>
    /* Table styles */
    #sample_1 {
        width: 100%;
        overflow: hidden;
        border-radius: 10px;
    }

    #sample_1 th {
        padding: 15px 0px 15px 0px;
        text-align: left;
    }

    #sample_1 th {
        background-color: darkblue; /* Header background color */
        color: #fff;
    }

    /* Alert styles */
    .alert {
        border-radius: 10px;
        margin-top: 20px;
    }

    /* No Record Found styles */
    .no-record {
        font-size: 15px;
        color: white;
    }

    .card {
        max-width: 100%;
        overflow: hidden;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .calendar-container {
        max-width: 100%;
        overflow: hidden;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .calendar-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        max-width: 100%;
        overflow: hidden;
        padding: 0 20px;
    }

    .calendar-navigation {
        display: flex;
        align-items: center;
    }

    .calendar-navigation span {
        height: 38px;
        width: 38px;
        margin: 0 5px;
        cursor: pointer;
        text-align: center;
        line-height: 38px;
        border-radius: 50%;
        user-select: none;
        color: #aeabab;
        font-size: 1.5rem;
        background-color: #fff;
        transition: background-color 0.3s ease;
    }

    .calendar-navigation span:hover {
        background-color: #f1f1f1;
    }

    .calendar-weekdays {
        list-style: none;
        display: flex;
        max-width: 100%;
        overflow: hidden;
        padding: 0;
        margin: 20px 0 10px;
    }

    .calendar-weekdays li {
        width: calc(100% / 7);
        text-align: center;
        font-weight: 500;
        font-size: 1rem;
        color: #333;
    }

    .calendar-body {
        max-width: 100%;
        overflow: hidden;
        padding: 0 20px;
    }

    .calendar-dates {
        list-style: none;
        display: flex;
        flex-wrap: wrap;
        max-width: 100%;
        overflow: hidden;
        margin: 0;
        padding: 0;
    }

    .calendar-dates li {
        width: calc(100% / 7);
        font-size: 1rem;
        color: #333;
        padding: 10px;
        box-sizing: border-box;
        text-align: center;
        cursor: pointer;
        position: relative;
        transition: background-color 0.3s ease;
    }

    .calendar-dates li.active {
        color: #fff;
        background-color: darkblue;
        border-radius: 10%;
    }

    .calendar-dates li::before {
        content: "";
        position: absolute;
        z-index: -1;
        top: 50%;
        left: 50%;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        transform: translate(-50%, -50%);
        transition: background-color 0.3s ease;
    }

    .calendar-dates li.active::before {
        background: darkblue;
    }

    .calendar-dates li:not(.active):hover::before {
        background: #e4e1e1;
    }

    #greeting {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .user {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .notice-item {
        padding: 3px;
        margin: 8px;
        border-radius: 10px;
    }

    .notice-content h5 {
        color: #333;
        padding: 2px;
    }

    .notice-content p {
        color: darkblue; /* Description text color */
    }
</style>

<h2 class="user">Hii, @CV.UserName() </h2>
<div id="greeting"></div>

<section class="section dashboard">
    @if (TempData["SEC_User_ChangePassword"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mb-5" role="alert">
            @TempData["SEC_User_ChangePassword"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <div class="row d-flex">
        <div class="col-lg-12">
            <div class="row">

                <div class="col-xxl-2 col-md-6">
                    <div class="card info-card sales-card border-5 border-primary border-top rounded">
                        <div class="card-body">
                            <h5 class="card-title">Visitors <span>|</span></h5>
                            <div class="d-flex align-items-center">
                                <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                                    <i class="fa-solid fa-users"></i>
                                </div>
                                <div class="ps-3">
                                    <h6>@ViewBag.DashboardData["VisitorCount"]</h6>
                                </div>
                            </div>
                            <hr class="border-primary" />
                            <a asp-area="MST_Visitor" asp-controller="MST_Visitor" asp-action="Index" class="text-end text-primary">View Details <i class="bi bi-arrow-right-circle-fill"></i></a>
                        </div>
                    </div>
                </div>

                
                <div class="col-xxl-10">
                    <div class="card info-card @((int)ViewBag.DashboardData["BedCount"] == (int)ViewBag.DashboardData["StudentCount"] ? "border-danger" : "border-success") border-5 border-start rounded">
                        <div class="card-body">
                            <h5 class="card-title"><i class="fa-solid fa-comment"></i> Hostel Status</h5>
                            <div class="">
                                @if ((int)ViewBag.DashboardData["BedCount"] == (int)ViewBag.DashboardData["StudentCount"])
                                {
                                    <h6 class="text-danger ms-2">Admission closes! 😔</h6>
                                }
                                else
                                {
                                    <h6 class="text-success">🏠 Hostel Admission Open! 🌟</h6>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                

                <!-- Add more cards as needed -->
            </div>
        </div>
    </div>
</section>



<section class="section">
    <div class="row">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title"><i class="fa-solid fa-note-sticky"></i> Notice</h5>


                   
                    @if (Model != null && Model.Rows.Count > 0)
                    {
                        @foreach (DataRow row in Model.Rows)
                        {
                            <div class="notice-item ps-2 pt-2 mt-2 shadow-sm bg-body-tertiary rounded">
                                <div class="notice-content">
                                    <h6><b>@row["Title"]</b></h6>
                                    <p><i>@row["Description"]</i></p>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <tr>
                            <div class="w-full p-2 rounded bg-danger bg-opacity-75">
                                <i class="bi bi-x-circle-fill text-light"></i> <span style="font-size: 15px; color: white;">No Record Found</span>
                            </div>
                        </tr>
                    }
                </div>
            </div>
        </div>


        <div class="col-lg-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title"><i class="fa-solid fa-calendar-days"></i> Calendar</h5>

                    <div class="calendar-container">
                        <header class="mt-3 calendar-header">
                            <p class="calendar-current-date rounded-5 bg-secondary p-2 text-light fw-bold"></p>
                            <div class="calendar-navigation">
                                <span id="calendar-prev"
                                      class="material-symbols-rounded text-light" style="background-color:darkblue">
                                    <i class="fa-solid fa-circle-arrow-left"></i>
                                </span>
                                <span id="calendar-next"
                                      class="material-symbols-rounded text-light" style="background-color:darkblue">
                                    <i class="fa-solid fa-circle-arrow-right"></i>
                                </span>
                            </div>
                        </header>

                        <div class="calendar-body">
                            <ul class="calendar-weekdays bg-warning rounded-5 p-2">
                                <li>Sun</li>
                                <li>Mon</li>
                                <li>Tue</li>
                                <li>Wed</li>
                                <li>Thu</li>
                                <li>Fri</li>
                                <li>Sat</li>
                            </ul>
                            <ul class="mb-3 calendar-dates"></ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Get the current time
        var currentTime = new Date();
        var hours = currentTime.getHours();

        // Get the greeting based on the time
        var greeting;
        if (hours < 12) {
            greeting = "Good Morning 🌞";
        } else if (hours < 18) {
            greeting = "Good Afternoon ☀️";
        } else {
            greeting = "Good Evening 🌜";
        }

        // Display the greeting in the designated element
        var greetingElement = document.getElementById("greeting");
        if (greetingElement) {
            greetingElement.textContent = greeting;
        }
    });


    let date = new Date();
    let year = date.getFullYear();
    let month = date.getMonth();

    const day = document.querySelector(".calendar-dates");

    const currdate = document
        .querySelector(".calendar-current-date");

    const prenexIcons = document
        .querySelectorAll(".calendar-navigation span");

    // Array of month names
    const months = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
    ];

    // Function to generate the calendar
    const manipulate = () => {

        // Get the first day of the month
        let dayone = new Date(year, month, 1).getDay();

        // Get the last date of the month
        let lastdate = new Date(year, month + 1, 0).getDate();

        // Get the day of the last date of the month
        let dayend = new Date(year, month, lastdate).getDay();

        // Get the last date of the previous month
        let monthlastdate = new Date(year, month, 0).getDate();

        // Variable to store the generated calendar HTML
        let lit = "";

        // Loop to add the last dates of the previous month
        for (let i = dayone; i > 0; i--) {
            lit +=
                `<li class="inactive">${monthlastdate - i + 1}</li>`;
        }

        // Loop to add the dates of the current month
        for (let i = 1; i <= lastdate; i++) {

            // Check if the current date is today
            let isToday = i === date.getDate()
                && month === new Date().getMonth()
                && year === new Date().getFullYear()
                ? "active"
                : "";
            lit += `<li class="${isToday}">${i}</li>`;
        }

        // Loop to add the first dates of the next month
        for (let i = dayend; i < 6; i++) {
            lit += `<li class="inactive">${i - dayend + 1}</li>`
        }

        // Update the text of the current date element
        // with the formatted current month and year
        currdate.innerText = `${months[month]} ${year}`;

        // update the HTML of the dates element
        // with the generated calendar
        day.innerHTML = lit;
    }

    manipulate();

    // Attach a click event listener to each icon
    prenexIcons.forEach(icon => {

        // When an icon is clicked
        icon.addEventListener("click", () => {

            // Check if the icon is "calendar-prev"
            // or "calendar-next"
            month = icon.id === "calendar-prev" ? month - 1 : month + 1;

            // Check if the month is out of range
            if (month < 0 || month > 11) {

                // Set the date to the first day of the
                // month with the new year
                date = new Date(year, month, new Date().getDate());

                // Set the year to the new year
                year = date.getFullYear();

                // Set the month to the new month
                month = date.getMonth();
            }

            else {

                // Set the date to the current date
                date = new Date();
            }

            // Call the manipulate function to
            // update the calendar display
            manipulate();
        });
    });
</script>